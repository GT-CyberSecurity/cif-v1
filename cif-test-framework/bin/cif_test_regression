#!/usr/bin/perl

use strict;
use warnings;

# fix lib paths, some may be relative
BEGIN {
    require File::Spec;
    my @libs = (
        "./lib",
        "../libcif/lib", # dev mode
        "../libcif-dbi/lib", # dev mode
    );
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            unless ($bin_path) {
                if ( File::Spec->file_name_is_absolute(__FILE__) ) {
                    $bin_path = ( File::Spec->splitpath(__FILE__) )[1];
                }
                else {
                    require FindBin;
                    no warnings "once";
                    $bin_path = $FindBin::Bin;
                }
            }
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }
}

use CIF::TESTFRAMEWORK;
use Getopt::Std;
use Data::Dumper;
use CIF qw/debug generate_uuid_random generate_uuid_ns/;

my %opts;

getopts('hdv:C:',\%opts);
our $debug = $opts{'d'} || 1;
$debug = $opts{'v'} if($opts{'v'});

my $config      = $opts{'C'} || $ENV{'HOME'}.'/.cif';

# basic tests

our $tests = [
    {
        address     => '1.2.3.4',
        assessment  => 'scanner',
        guid        => generate_uuid_ns('everyone'),
        confidence  => 75,
        id          => generate_uuid_random(),
    },
    {
        address     => 'example.com',
        assessment  => 'botnet',
        guid        => generate_uuid_ns('group1'),
        confidence  => 35,
        id          => generate_uuid_random(),
    },
];

# create new test framework object

my ($err,$ret) = CIF::TESTFRAMEWORK->new({
    config  => $config,
    tests   => $tests,
});

die($err) if($err);

my $obj = $ret;

# generate temp apikey

debug('generating apikey...');
my $apikey = $obj->init_apikey();

# set the apikey to the client
$obj->get_client->set_apikey($apikey);

# run tests

($err,$ret) = $obj->process({
    client  => $obj->get_client(),
});

debug('all tests successful...') if($ret);

# cleanup

debug('removing key: '.$apikey);
$obj->purge_apikey($apikey);
