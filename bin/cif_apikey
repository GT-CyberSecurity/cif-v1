#!/usr/bin/perl -w

use strict;

# fix lib paths, some may be relative
BEGIN {
    require File::Spec;
    my @libs = ("lib", "local/lib");
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            unless ($bin_path) {
                if ( File::Spec->file_name_is_absolute(__FILE__) ) {
                    $bin_path = ( File::Spec->splitpath(__FILE__) )[1];
                }
                else {
                    require FindBin;
                    no warnings "once";
                    $bin_path = $FindBin::Bin;
                }
            }
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }

}

use Getopt::Std;
use CIF qw/generate_uuid_ns is_uuid/;
use CIF::DBI;
use CIF::APIKey;
use Text::Table;
use Config::Simple;
use Data::Dumper;

my %opts;
getopt('G:g:e:k:u:c:', \%opts);
die(usage()) if($opts{'h'});

my $user            = $opts{'u'};
my $access          = $opts{'e'};
my $groups          = $opts{'g'};
my $default_guid    = $opts{'G'};
my $desc            = $opts{'D'};
my $config          = $opts{'c'} || $ENV{'HOME'}.'/.cif';

$config = Config::Simple->new($config) || die('missing config file: '.$config);
$config = $config->param(-block => 'db') || die("missing 'router_db' section of config file...");

if($default_guid){
    $default_guid = generate_uuid_ns($default_guid) unless(is_uuid($default_guid));
}

if($user){
    die(usage()) unless($opts{'k'} || $opts{'l'} || $opts{'g'} || $opts{'d'});
}

sub usage {
    return <<EOF;
Usage: perl $0 -u joe\@example.com
    -h  --help:     this meessage
    -e  --enable:   enable access to specific section (infrastructure,domains,malware,etc... default: all)
    -r  --revoke:   revoke a key
    -w  --write:    enable write access
    -a  --add:      add key
    -d  --delete:   delete key
    -k  --key:      apikey
    -l  --list:     list users
    -g  --groups:   add user to list of groups (eg: everyone,group1,group2)
    -G  --default group: set the default group
    -D  --desc:     give the key an optional description

Examples:
    \$> perl $0 -u joe\@example.com
    \$> perl $0 -u joe\@example.com -a everyone,group2
    \$> perl $0 -d -k 96818121-f1b6-482e-8851-8fb49cb2f6c0
    \$> perl $0 -u joe\@example.com -e infrastructure -a
    \$> perl $0 -k 96818121-f1b6-482e-8851-8fb49cb2f6c0 -w
    \$> perl $0 -k 96818121-f1b6-482e-8851-8fb49cb2f6c0 -r
    \$> perl $0 -l
EOF
}

## TODO -- clean this up
## turn into cif profiles
my $db          = $config->{'database'} || 'cif';
my $db_user     = $config->{'user'}     || 'postgres';
my $db_password = $config->{'password'} || '';
my $db_host     = $config->{'host'}     || '127.0.0.1';
    
my $dbi = 'DBI:Pg:database='.$db.';host='.$db_host;
    
require CIF::DBI;
my $ret = CIF::DBI->connection($dbi,$db_user,$db_password,{ AutoCommit => 1});

if(exists($opts{'a'})){
    die(usage()) unless($user);
    my $id = CIF::APIKey->genkey(
        uuid_alias      => $user,
        description     => $desc,
        access          => $access,
        write           => $opts{'w'},
        revoked         => $opts{'r'},
        parentid        => $opts{'p'},
        groups          => $groups,
        default_guid    => $default_guid,
    );
} elsif($opts{'r'} || $opts{'w'}) {
    die(usage()) unless($opts{'k'});
    my @r = CIF::APIKey->search(uuid => $opts{'k'});
    if($#r > -1){
        foreach (@r){
            if($opts{'r'}){
                my $val = 0;
                $val = 1 unless($_->revoked());
                $_->revoked($val);
            }
            if($opts{'w'}){
                my $val = 0;
                $val = 1 unless($_->write());
                $_->write($val);
            }
            $_->update();
        }
    }
} elsif($opts{'g'}){
    if($opts{'k'}){
        if($opts{'d'}){
            my $k = CIF::APIKey->retrieve(uuid => $opts{'k'});
            my $g = generate_uuid_ns($opts{'g'});
            foreach ($k->groups()){
                if($g eq $_->guid()){
                    $_->delete();
                }
            }
        } else {
            my @r = CIF::APIKey->search(uuid => $opts{'k'});
            if($#r > -1){
                foreach (@r){
                    $_->add_groups($opts{'G'},$opts{'g'});
                }
            }
        }
    } else {
        my @g = split(/,/,$opts{'g'});
        my $t = Text::Table->new('group','guid');
        foreach(@g){
            $t->load([$_,generate_uuid_ns($_)]);
        }
        print $t;
        exit(0);
    }
} elsif($opts{'G'}){
    die(usage()) unless($opts{'k'});
    my $key = CIF::APIKey->retrieve(uuid => $opts{'k'});
    foreach ($key->groups()){
        next unless($_->default_guid());
        $_->default_guid(undef);
        $_->update();
    }
    foreach ($key->groups()){
        next unless($_->guid eq $default_guid);
        $_->default_guid('true');
        $_->update();
    }


}

if(exists($opts{'d'}) && !$opts{'g'}){
    die(usage()) unless($opts{'k'} || $user);
    my @recs;
    if($opts{'k'}){
        @recs = CIF::APIKey->search(uuid => $opts{'k'});
    } else {
        @recs = CIF::APIKey->search(uuid_alias => $user);
    }
    foreach (@recs){
        print 'deleting: '.$_->uuid()."\n";
        $_->delete();

    }
}
my @recs;
if(!$user && $opts{'k'}){
    my @r = CIF::APIKey->search(uuid => $opts{'k'});
    unless(@r){
        print 'no keys found'."\n";
        exit(0);
    }
    $user = $r[0]->uuid_alias();
}
if($user){
    @recs = CIF::APIKey->search(uuid_alias => $user, { order_by => 'created DESC' });
} else {
    @recs = CIF::APIKey->retrieve_all();
}
if($#recs > -1){
    my $t = Text::Table->new('userid','key','description','guid','default_guid','access','write','revoked','created');
    foreach (@recs){
        my $groups = $_->mygroups();
        my @groups = split(/,/,$groups);
        foreach my $g (@groups){
            my $isDefaultGuid = ($g eq $_->default_guid()) ? 'true' : '';
            $t->load([$_->uuid_alias(),$_->uuid(),$_->description(),$g,$isDefaultGuid,$_->access(),$_->write(),$_->revoked(),$_->created()]);
        }
    }
    print $t;
} else {
    die('you have no api keys');
}
