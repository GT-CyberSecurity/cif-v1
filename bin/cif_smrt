#!/usr/bin/perl -w

use strict;

# fix lib paths, some may be relative
BEGIN {
    require File::Spec;
    my @libs = (
        "lib",
        "local/lib",
        "../libcif/lib", # in case we're in -dev mode
        "../../../lwpx-paranoidagent/lib",
        "../../../iodef-pb-simple-perl/lib",
    );
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            unless ($bin_path) {
                if ( File::Spec->file_name_is_absolute(__FILE__) ) {
                    $bin_path = ( File::Spec->splitpath(__FILE__) )[1];
                }
                else {
                    require FindBin;
                    no warnings "once";
                    $bin_path = $FindBin::Bin;
                }
            }
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }
}

use Getopt::Std;
use CIF::Smrt;
use Config::Simple;
use Data::Dumper;
use MIME::Lite;
use CIF qw/debug/;
use Sys::MemInfo qw(totalmem);

my %opts;
getopts('g:z:hNA:s:T:t:dFC:f:r:v:Pp:',\%opts);
our $debug = $opts{'d'} || 0;
$debug = $opts{'v'} if($opts{'v'});

my $config      = $opts{'C'} || $ENV{'HOME'}.'/.cif';
my $rules       = $opts{'r'};
my $feed        = $opts{'f'};
my $load_full   = $opts{'F'};
my $postprocess = $opts{'P'} || $opts{'p'} || 0;

my $rules_dir    = '/opt/cif/etc';
my $throttle    = $opts{'T'} || 'medium';
my $threads     = $opts{'t'};
my $admin       = $opts{'A'} || 'root';
my $fail_closed = $opts{'N'} || 0;
my $disable_p   = $opts{'z'};
my $goback      = $opts{'g'} || 3;

debug('fail closed: '.$fail_closed) if($debug);

if((&totalmem / (1024*1024*1024)) < 1){
    #print "total memory: ".(&totalmem / (1024*1024*1024))."\n";
    print '*** WARNING ***'."\n";
    print "$0 should be run on a system with at-least 2-4GB of memory\n";
    print "performance may suffer, or segfaults may occur frequently as a result\n";
    print '*** WARNING ***'."\n";
}

if(!$threads){
    $threads = CIF::Smrt::throttle($throttle);
}

# this is for the doc
my @p1 = @CIF::Smrt::postprocessors;
foreach (@p1){
    $_ =~ s/CIF::Smrt::Plugin::Postprocessor:://;
    $_ = lc($_);
}
my $pp = join(',',@p1);
# end doc

if($postprocess){
    if($postprocess eq 1){
        $postprocess = join(',',@p1);
    }
    my @stuff = split(/,/,$postprocess);
    # check validity of the pp's
    foreach (@stuff){
        my $found = 0;
        foreach my $p (@p1){
            next unless(lc($_) eq $p);
            $found = 1;
        }
        unless($found){
            print 'unknown postprocessor: '.$_."\n";
            exit(-1);   
        }
    }
    # if we want to disable certain postprocessors
    if($disable_p){
        my @tmp;
        foreach my $d (split(/,/,$disable_p)){
            foreach my $s (@stuff){
                next if(lc($s) eq lc($d));
                push(@tmp,$s);
            }
        }
        @stuff = @tmp;
    }
    $postprocess = \@stuff;
}

# this needs to go after the postprocessor code to fill in the blanks
die usage() if($opts{'h'} || !$rules);

sub usage {
    return <<EOF;
Usage: perl $0 -C /home/cif/.cif -r $rules_dir/misc.cfg -f malwaredomainlist -T low

    -h  --help:     this message
    -f  --feed:     feed name (eg: section header in the configuration file)
    -C  --config:   specify the cif config file (default: $config)
    -r  --rules:    specify the rules file to work with (eg: etc/malwaredomains.cfg)
    -d  --debug:    debug 
    
Advanced:
    -g  --go-back:          change the default 'goback' behavior
                            (how far back in-days to process a given feed, default: $goback)
    -P  --post-processors:  resolve domains, resolve bgp, resolve urls, etc
                            (default: $postprocess)
                            
    -p  --post-processors:  only run specific postprocessors ($pp)
                            (default: $postprocess)
                            
    -z  --disable:          enable all postprocessors, disable a set of specific ones (csv list)
                            
    -T  --throttle:         throttle (how man threads to use, default: $throttle)
                            low:    threads = number of cores * 0.5
                            medium: threads = number of cores
                            high:   threads = number of cores * 2

    -N  --fail-closed:      error out if one of the jobs fail, mail the -A $admin
                            (1|0 -- default 0)
                            
    -A  --admin:            designate an admin email address where errors should go if we fail open
                            (default: $admin)
                        
Examples:
    $0 -C /home/cif/.cif -r $rules_dir/spyeyetracker.cfg -f binaries -T medium -P
    $0 -C /home/cif/.cif -r $rules_dir/malwaredomains.cfg -f domains -T high -d -P
    $0 -C /home/cif/.cif -r $rules_dir/misc.cfg -f spamhaus_drop -d -p ip,malware
    $0 -r $rules_dir/misc.cfg -f spamhaus_drop -d -P -z ip,malware
EOF
}

my $ret;
my ($err,$smrt) = CIF::Smrt->new({
    config          => $config,
    threads         => $threads,
    feed            => $feed,
    rules           => $rules,
    load_full       => $load_full,
    postprocess     => $postprocess,
    goback          => $goback,
});

if($err){
    print(usage()."\n\n");
    print('!!!ERROR!!!'."\n");
    print($err."\n\n");
    exit(-1);
}

($err,$ret) = $smrt->process();
unless($err){
    debug('done...') if($debug);
    exit(0);
}

print '[cif-smrt] failure: '.$smrt->get_rules()->{'source'}."\n";
print $err."\n";

if(!$fail_closed){
    my $msg = MIME::Lite->new(
        To      => $admin,
        Subject => 'cif-smrt failure: '.$smrt->get_rules()->{'source'}.' -- '.$feed,
        Data    => "$err\nfeed: $feed"
    )->send();
    if($err =~ /contact system administrator/){
        exit(-1);
    } else {
        exit(0);
    }
} else {
    exit(-1) ;
}
